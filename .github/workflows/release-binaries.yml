name: Release (Windows)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and release Windows .exe
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install OpenSSL
        shell: pwsh
        run: choco install openssl --no-progress -y

      - name: Export OpenSSL environment
        shell: pwsh
        run: |
          $candidates = @(
            'C:\\Program Files\\OpenSSL-Win64',
            'C:\\Program Files\\OpenSSL',
            'C:\\Program Files\\OpenSSL-Win32'
          )
          $prefix = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $prefix = $p; break } }
          if (-not $prefix) {
            Write-Host "Could not find OpenSSL under default locations. Contents of C:\\Program Files:";
            Get-ChildItem 'C:\\Program Files' | Where-Object { $_.Name -like 'OpenSSL*' } | ForEach-Object { Write-Host $_.FullName }
            throw "OpenSSL install path not found"
          }
          $cryptoLib = Get-ChildItem -Path (Join-Path $prefix 'lib') -Recurse -Filter 'libcrypto.lib' -ErrorAction SilentlyContinue | Select-Object -First 1
          $sslLib    = Get-ChildItem -Path (Join-Path $prefix 'lib') -Recurse -Filter 'libssl.lib'    -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $cryptoLib) { throw "Could not find libcrypto.lib under $prefix" }
          if (-not (Test-Path (Join-Path $prefix 'include'))) { throw "Could not find OpenSSL include dir under $prefix" }
          $includeDir = Join-Path $prefix 'include'
          $libDir = Join-Path $prefix 'lib'
          echo "OPENSSL_ROOT_DIR=$prefix" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=$prefix" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$includeDir" >> $env:GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=$($cryptoLib.FullName)" >> $env:GITHUB_ENV
          if ($sslLib) { echo "OPENSSL_SSL_LIBRARY=$($sslLib.FullName)" >> $env:GITHUB_ENV }
          echo "OPENSSL_LIB_DIR=$($cryptoLib.DirectoryName)" >> $env:GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$prefix" >> $env:GITHUB_ENV
          echo "Path=$env:Path;$prefix\\bin" >> $env:GITHUB_ENV
          echo "OPENSSL_USE_STATIC_LIBS=FALSE" >> $env:GITHUB_ENV
          echo "LIB=$($cryptoLib.DirectoryName);$env:LIB;$libDir" >> $env:GITHUB_ENV
          echo "LIBPATH=$($cryptoLib.DirectoryName);$env:LIBPATH;$libDir" >> $env:GITHUB_ENV
          $modules = Join-Path $libDir 'ossl-modules'
          if (Test-Path $modules) { echo "OPENSSL_MODULES=$modules" >> $env:GITHUB_ENV }

      - name: Configure liboqs (disable OpenSSL backend)
        shell: pwsh
        run: |
          echo "CMAKE_ARGS=-DOQS_USE_OPENSSL=OFF" >> $env:GITHUB_ENV

      - name: Cache cargo and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release, static CRT)
        run: cargo build --locked --release
        env:
          RUSTFLAGS: "-C target-feature=+crt-static -L native=\"${{ env.OPENSSL_LIB_DIR }}\" -l dylib=libcrypto -l dylib=libssl"

      - name: Smoke test executable
        shell: pwsh
        run: |
          & target/release/unchained.exe --version

      - name: Prepare release assets
        shell: pwsh
        run: |
          # Verify binaries exist
          Get-ChildItem -Path target/release -Filter *.exe
          # Staging directory for flattened zip contents
          $dist = "dist/windows"
          if (Test-Path $dist) { Remove-Item $dist -Recurse -Force }
          New-Item -ItemType Directory -Path $dist | Out-Null
          # Copy artifacts into staging dir (flattened)
          Copy-Item -Path target/release/unchained.exe -Destination "$dist/unchained.exe" -Force
          Copy-Item -Path target/release/inspect_db.exe -Destination "$dist/inspect_db.exe" -Force
          Copy-Item -Path config.toml -Destination "$dist/config.toml" -Force
          Copy-Item -Path README.md -Destination "$dist/README.md" -Force
          Copy-Item -Path unchained-run.bat -Destination "$dist/unchained-run.bat" -Force
          # Bundle a zip with exe + config + README + launcher (flattened)
          $zipPath = "target/release/unchained-windows-x86_64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$dist/*" -DestinationPath $zipPath

      - name: Compute release metadata
        id: meta
        shell: pwsh
        run: |
          $short = $env:GITHUB_SHA.Substring(0,7)
          "tag=auto-main-$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "name=Main build $short" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Create Release and Upload Assets (.exe)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          target_commitish: ${{ github.sha }}
          files: |
            target/release/unchained.exe
            target/release/inspect_db.exe
            target/release/unchained-windows-x86_64.zip
            unchained-run.bat
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


